
#include <stdint.h>

/* ===== Base addresses (STM32L4R5) ===== */
#define PERIPH_BASE        0x40000000UL
#define AHB2PERIPH_BASE    (PERIPH_BASE + 0x08000000UL)
#define APB1PERIPH_BASE    (PERIPH_BASE + 0x00000000UL)

#define RCC_BASE           (PERIPH_BASE + 0x00021000UL)
#define GPIOB_BASE         (AHB2PERIPH_BASE + 0x0400UL)
#define GPIOC_BASE         (AHB2PERIPH_BASE + 0x0800UL)
#define TIM4_BASE          (APB1PERIPH_BASE + 0x00000800UL)

/* ===== RCC ===== */
#define RCC_AHB2ENR        (*(volatile uint32_t*)(RCC_BASE + 0x4C))
#define RCC_APB1ENR1       (*(volatile uint32_t*)(RCC_BASE + 0x58))

/* ===== GPIO ===== */
typedef struct {
  volatile uint32_t MODER;
  volatile uint32_t OTYPER;
  volatile uint32_t OSPEEDR;
  volatile uint32_t PUPDR;
  volatile uint32_t IDR;
  volatile uint32_t ODR;
  volatile uint32_t BSRR;
  volatile uint32_t LCKR;
  volatile uint32_t AFRL;
  volatile uint32_t AFRH;
  volatile uint32_t BRR;
} GPIO_TypeDef;

#define GPIOB ((GPIO_TypeDef*)GPIOB_BASE)
#define GPIOC ((GPIO_TypeDef*)GPIOC_BASE)

/* ===== TIM4 ===== */
typedef struct {
  volatile uint32_t CR1,CR2,SMCR,DIER,SR,EGR,CCMR1,CCMR2,CCER,CNT,PSC,ARR,RCR,CCR1,CCR2,CCR3,CCR4,BDTR,DCR,DMAR;
} TIM_TypeDef;
#define TIM4 ((TIM_TypeDef*)TIM4_BASE)

/* ===== NVIC ===== */
#define NVIC_ISER0         (*(volatile uint32_t*)0xE000E100UL)
#define TIM4_IRQn_Number   30U

/* ===== LED pins =====
   LD1 (Green) = PC7
   LD2 (Blue)  = PB7
   LD3 (Red)   = PB14
*/
#define LED_G_PORT  GPIOC
#define LED_G_PIN   7U

#define LED_B_PORT  GPIOB
#define LED_B_PIN   7U

#define LED_R_PORT  GPIOB
#define LED_R_PIN   14U

/* ===== Timer @ 16 MHz -> 1 Hz ===== */
#define PSC_1KHZ  15999U   /* 16 MHz / (15999+1) = 1 kHz */
#define ARR_1S    999U     /* 1000 ticks = 1 s */

/* ===== Helpers ===== */
static inline void leds_off(void){
  LED_G_PORT->BSRR = (1U<<LED_G_PIN) << 16;
  LED_B_PORT->BSRR = (1U<<LED_B_PIN) << 16;
  LED_R_PORT->BSRR = (1U<<LED_R_PIN) << 16;
}
static inline void led_on(GPIO_TypeDef* port, uint32_t pin){
  port->BSRR = (1U<<pin);
}

/* Sequence: G -> B -> R */
typedef struct { GPIO_TypeDef* port; uint8_t pin; } led_t;
static const led_t SEQ[3] = {
  { LED_G_PORT, LED_G_PIN },
  { LED_B_PORT, LED_B_PIN },
  { LED_R_PORT, LED_R_PIN }
};
static volatile uint8_t seq_idx = 0;

/* ===== Init ===== */
static void gpio_init(void){
  RCC_AHB2ENR |= (1U<<1) | (1U<<2);   /* GPIOBEN | GPIOCEN */

  /* PC7 output */
  GPIOC->MODER &= ~(3U<<(LED_G_PIN*2));
  GPIOC->MODER |=  (1U<<(LED_G_PIN*2));

  /* PB7, PB14 outputs */
  GPIOB->MODER &= ~((3U<<(LED_B_PIN*2)) | (3U<<(LED_R_PIN*2)));
  GPIOB->MODER |=  ((1U<<(LED_B_PIN*2)) | (1U<<(LED_R_PIN*2)));

  leds_off();
  led_on(SEQ[seq_idx].port, SEQ[seq_idx].pin);  /* start on GREEN (PC7) */
}

static void tim4_init_1hz(void){
  RCC_APB1ENR1 |= (1U<<2);             /* TIM4EN */
  TIM4->CR1 = 0;
  TIM4->PSC = PSC_1KHZ;                /* 1 kHz */
  TIM4->ARR = ARR_1S;                  /* 1 s */
  TIM4->EGR = 1U;                      /* UG */
  TIM4->SR  = 0U;                      /* clear flags */
  TIM4->DIER = 1U;                     /* UIE */
  NVIC_ISER0 = (1U<<TIM4_IRQn_Number); /* NVIC enable TIM4 IRQ (30) */
  TIM4->CR1 |= 1U;                     /* CEN */
}

/* ===== ISR ===== */
void TIM4_IRQHandler(void){
  if (TIM4->SR & 1U){
    TIM4->SR = 0U;                     /* clear UIF */
    seq_idx = (uint8_t)((seq_idx + 1U) % 3U);   /* G -> B -> R -> ... */
    leds_off();
    led_on(SEQ[seq_idx].port, SEQ[seq_idx].pin);
  }
}

/* ===== Main ===== */
int main(void){
  gpio_init();
  tim4_init_1hz();
  while(1){ __asm volatile("wfi"); }
}
